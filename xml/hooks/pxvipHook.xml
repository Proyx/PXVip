<?xml version="1.0" encoding="utf-8"?>
<hookexport>
  <hookdata>
    <config>
      <hook_name>PXVip</hook_name>
      <hook_desc/>
      <hook_author>Proyx</hook_author>
      <hook_email/>
      <hook_website/>
      <hook_update_check/>
      <hook_requirements><![CDATA[a:3:{s:21:"required_applications";a:0:{}s:20:"hook_php_version_min";s:0:"";s:20:"hook_php_version_max";s:0:"";}]]></hook_requirements>
      <hook_version_human>1.0</hook_version_human>
      <hook_version_long>1.0</hook_version_long>
      <hook_extra_data><![CDATA[a:2:{s:7:"display";a:1:{s:8:"language";s:38:" pxvip_public_lang: pxvip_userInfoPane";}s:8:"language";a:1:{s:17:"pxvip_public_lang";a:1:{i:0;s:18:"pxvip_userInfoPane";}}}]]></hook_extra_data>
      <hook_key>pxvipHook</hook_key>
      <hook_global_caches/>
    </config>
  </hookdata>
  <hookfiles>
    <file>
      <hook_file_real>PXVip_userInfoPane.php</hook_file_real>
      <hook_type>templateHooks</hook_type>
      <hook_classname>PXVip</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:0:"";s:9:"skinGroup";s:11:"skin_global";s:12:"skinFunction";s:12:"userInfoPane";s:4:"type";s:2:"if";s:2:"id";s:9:"postCount";s:8:"position";s:10:"post.endif";}]]></hook_data>
      <hooks_source><![CDATA[<?php

class PXVip
{
	public function __construct()
	{
		$this->registry			= ipsRegistry::instance();
		$this->DB		= $this->registry->DB();
		$this->settings			=& $this->registry->fetchSettings();
		$this->lang       =  $this->registry->getClass('class_localization');
		$this->registry->getClass('class_localization')->loadLanguageFile( array( 'public_lang' ), 'pxvip' );
	}
	
	public function getOutput()
	{
	}
	
	public function replaceOutput( $output, $key )
	{
		$tag		= '<!--hook.'.$key.'-->';
		$lastFound	  = 0;
		
		foreach( $this->registry->output->getTemplate('global')->functionData['userInfoPane'] as $mid => $author )
		{
			$author = $author['author'];
			
			ipsRegistry::DB()->build( array( 'select' => '*',
				'from' => 'vips') );
				
			$vip = ipsRegistry::DB()->execute();
			
			$isVip = false;	
			
			while( $v = $this->DB->fetch( $vip ) ) {
				if($v['nome'] == $author['author_name']) {
					$isVip = true;
				}
			}
			
			
			
			
			$pos = strpos( $output, $tag, $lastFound );
			$strToInsert = $this->registry->output->replaceMacros($isVip? str_replace('#dias#', '0', '<li class="post_count desc lighter">'.$this->lang->words['pxvip_userInfoPane']).'</li>' : '');
		
			if ( $pos )
			{
				$output 		= substr_replace( $output, $strToInsert . $tag, $pos, strlen( $tag ) );
				$lastFound 	= $pos + strlen( $tag . $strToInsert );
		
			}
		}
		
		return $output;
	}
}]]></hooks_source>
    </file>
  </hookfiles>
  <hookextras_settings/>
  <hookextras_language>
    <language>
      <word_app>pxvip</word_app>
      <word_pack>public_lang</word_pack>
      <word_key>pxvip_userInfoPane</word_key>
      <word_default>Possui #dias# dias de vip</word_default>
    </language>
  </hookextras_language>
  <hookextras_modules/>
  <hookextras_help/>
  <hookextras_templates/>
  <hookextras_css/>
  <hookextras_replacements/>
  <hookextras_tasks/>
  <hookextras_database_create/>
  <hookextras_database_alter/>
  <hookextras_database_update/>
  <hookextras_database_insert/>
</hookexport>
